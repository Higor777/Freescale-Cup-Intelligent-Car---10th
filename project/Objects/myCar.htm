<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\myCar.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\myCar.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Sun May 01 06:20:24 2016
<BR><P>
<H3>Maximum Stack Usage =        240 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; AngleCalculate &rArr; asin &rArr; __aeabi_ddiv
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[120]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[a]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SysTick_Handler</a><BR>
 <LI><a href="#[1b]">CMP0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1b]">CMP0_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1a]">ADC0_IRQHandler</a> from adc.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[1b]">CMP0_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[24]">DAC0_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[b]">DMA0_IRQHandler</a> from dma.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[c]">DMA1_IRQHandler</a> from dma.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[d]">DMA2_IRQHandler</a> from dma.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[e]">DMA3_IRQHandler</a> from dma.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[10]">FTFA_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[13]">I2C0_IRQHandler</a> from i2c.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[14]">I2C1_IRQHandler</a> from i2c.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[22]">I2S0_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[2f]">IR_ISR</a> from ir.o(.text) referenced from ir.o(.text)
 <LI><a href="#[12]">LLW_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[27]">LPTimer_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[11]">LVD_LVW_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[26]">MCG_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from common.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[2b]">PIT0_CallBack</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[2c]">PIT1_CallBack</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[21]">PIT_IRQHandler</a> from pit.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[29]">PORTA_IRQHandler</a> from gpio.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[2a]">PORTC_PORTD_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[1f]">RTC_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[20]">RTC_Seconds_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[f]">Reserved20_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[28]">Reserved45_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[15]">SPI0_IRQHandler</a> from spi.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[16]">SPI1_IRQHandler</a> from spi.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[8]">SVC_Handler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[30]">SystemInit</a> from system_mkl26z4.o(.text) referenced from startup_mkl26z4.o(.text)
 <LI><a href="#[1c]">TPM0_IRQHandler</a> from tpm.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[1d]">TPM1_IRQHandler</a> from tpm.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[1e]">TPM2_IRQHandler</a> from tpm.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[25]">TSI0_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[17]">UART0_IRQHandler</a> from uart.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[18]">UART1_IRQHandler</a> from uart.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[19]">UART2_IRQHandler</a> from uart.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[2d]">UART_RX_ISR</a> from umc.o(.text) referenced from umc.o(.text)
 <LI><a href="#[2e]">UART_TX_ISR</a> from umc.o(.text) referenced from umc.o(.text)
 <LI><a href="#[23]">USB0_IRQHandler</a> from startup_mkl26z4.o(.text) referenced from startup_mkl26z4.o(RESET)
 <LI><a href="#[34]">__main</a> from __main.o(!!!main) referenced from startup_mkl26z4.o(.text)
 <LI><a href="#[33]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[32]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[34]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[35]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[37]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[134]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[135]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[136]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[104]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[38]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[39]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[3e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[137]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))

<P><STRONG><a name="[138]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[139]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[140]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[141]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[142]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[143]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[144]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[145]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[146]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[147]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[148]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[149]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[14a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[43]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[14b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[14c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[14d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[14e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[14f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[150]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[36]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[151]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[3d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[152]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; AngleCalculate &rArr; asin &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[153]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[122]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[42]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[154]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[44]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[46]"></a>AverFilter_getVal</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AverFilter_getVal &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>LP1Filter_getVal</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LP1Filter_getVal &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedCalculate
</UL>

<P><STRONG><a name="[4d]"></a>KalmanFliter</STRONG> (Thumb, 384 bytes, Stack size 72 bytes, filter.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = KalmanFliter &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleCalculate
</UL>

<P><STRONG><a name="[4f]"></a>ENC03_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, anglesensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = ENC03_Init &rArr; ADC_QuickInit &rArr; ADC_Init &rArr; ADC_Calibration &rArr; ADC_ITDMAConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_QuickInit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[51]"></a>MMA7361_Init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, anglesensor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MMA7361_Init &rArr; ADC_QuickInit &rArr; ADC_Init &rArr; ADC_Calibration &rArr; ADC_ITDMAConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_QuickInit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>SearchBeginPos</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, catchline.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>Get_TrackWidth</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, catchline.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchLine
</UL>

<P><STRONG><a name="[54]"></a>SearchBlock</STRONG> (Thumb, 186 bytes, Stack size 12 bytes, catchline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SearchBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchLine
</UL>

<P><STRONG><a name="[52]"></a>SearchLine</STRONG> (Thumb, 568 bytes, Stack size 16 bytes, catchline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SearchLine &rArr; SearchBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchBlock
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TrackWidth
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>Rightangle_Recognition</STRONG> (Thumb, 872 bytes, Stack size 24 bytes, catchline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Rightangle_Recognition &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>ImageBinaryzation</STRONG> (Thumb, 264 bytes, Stack size 64 bytes, catchline.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ImageBinaryzation &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5b]"></a>ImageBinary</STRONG> (Thumb, 386 bytes, Stack size 312 bytes, catchline.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[61]"></a>SetAnglePD</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[62]"></a>SetSpeedPI</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[63]"></a>SetMotorDead</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ctrl.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[64]"></a>AngleCalculate</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = AngleCalculate &rArr; asin &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFliter
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>AngleCtrl</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AngleCtrl &rArr; __aeabi_cdrcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>SpeedCalculate</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SpeedCalculate &rArr; LP1Filter_getVal &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP1Filter_getVal
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_GetPulse
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>Speed_EX_Ctrl</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Speed_EX_Ctrl &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>SpeedCtrl</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SpeedCtrl &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>DirectCtrl</STRONG> (Thumb, 1196 bytes, Stack size 24 bytes, ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DirectCtrl &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>CtrlOut</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CtrlOut &rArr; Motor_PWM &rArr; TPM_PWM_ChangeDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[77]"></a>Run_Forrest</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Run_Forrest &rArr; Motor_STOP &rArr; Motor_PWM &rArr; TPM_PWM_ChangeDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_STOP
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>Remode_Direct</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ctrl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Remode_Direct &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7e]"></a>ParameterList_Init</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ParameterList_Init &rArr; Show_Parameter &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Insert_ParameterNode
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Parameter
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>Data_Init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Data_Init &rArr; ADC_QuickReadValue &rArr; ADC_StartConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_QuickReadValue
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>Parameter_Change</STRONG> (Thumb, 790 bytes, Stack size 16 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = Parameter_Change &rArr; Show_Parameter &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITDMAConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_START
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_STA
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Parameter
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>Car_Protect</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Car_Protect &rArr; Motor_STOP &rArr; Motor_PWM &rArr; TPM_PWM_ChangeDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_STOP
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[40]"></a>main</STRONG> (Thumb, 804 bytes, Stack size 40 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = main &rArr; AngleCalculate &rArr; asin &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMC_Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_BatVol
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_QuickInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_ITDMAConfig
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_CallbackInstall
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Encoder_Init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7361_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Config
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_QuickInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC03_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCD_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCD_ImageCapture
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beacon_Check
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryMon_Init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverFilter_getVal
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_QuickReadValue
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_Protect
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Change
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterList_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remode_Direct
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Forrest
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlOut
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectCtrl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedCtrl
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_EX_Ctrl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedCalculate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleCtrl
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleCalculate
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageBinaryzation
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rightangle_Recognition
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchLine
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SearchBeginPos
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[a3]"></a>Queue_State</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, umc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Queue_State &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_DATA
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RX_ISR
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TX_ISR
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
</UL>

<P><STRONG><a name="[a4]"></a>Queue_Get</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, umc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Queue_Get &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TX_ISR
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
</UL>

<P><STRONG><a name="[a5]"></a>Queue_Init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, umc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Queue_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMC_Init
</UL>

<P><STRONG><a name="[a7]"></a>Queue_Put</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, umc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Queue_Put &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_DATA
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RX_ISR
</UL>

<P><STRONG><a name="[91]"></a>UMC_Init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, umc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UMC_Init &rArr; UART_QuickInit &rArr; CLOCK_GetClockFrequency &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_QuickInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CallbackTxInstall
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CallbackRxInstall
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITDMAConfig
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ab]"></a>UART_Send_DATA</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, umc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Put
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_State
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendData
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UM_Upload_Data
</UL>

<P><STRONG><a name="[ac]"></a>UM_Upload_Data</STRONG> (Thumb, 182 bytes, Stack size 320 bytes, umc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_DATA
</UL>

<P><STRONG><a name="[ad]"></a>SendData</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, umc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_DATA
</UL>

<P><STRONG><a name="[ae]"></a>my_abs</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, sprint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = my_abs &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
</UL>

<P><STRONG><a name="[7d]"></a>sprint</STRONG> (Thumb, 250 bytes, Stack size 72 bytes, sprint.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = sprint &rArr; my_abs &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_abs
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_BatVol
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Parameter
</UL>

<P><STRONG><a name="[af]"></a>handle_data</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = handle_data &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
</UL>

<P><STRONG><a name="[9a]"></a>Remote_Mode</STRONG> (Thumb, 268 bytes, Stack size 8 bytes, remote.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Remote_Mode &rArr; handle_data &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Get
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_State
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8d]"></a>BatteryMon_Init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, batterymon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = BatteryMon_Init &rArr; ADC_QuickInit &rArr; ADC_Init &rArr; ADC_Calibration &rArr; ADC_ITDMAConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_QuickInit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>Get_BatVol</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, batterymon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Get_BatVol &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_QuickReadValue
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_BatVol
</UL>

<P><STRONG><a name="[a2]"></a>Show_BatVol</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, batterymon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Show_BatVol &rArr; Get_BatVol &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_BatVol
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b4]"></a>Delay100Ns</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ccd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCD_Start
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCD_ImageCapture
</UL>

<P><STRONG><a name="[93]"></a>CCD_Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ccd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = CCD_Init &rArr; ADC_QuickInit &rArr; ADC_Init &rArr; ADC_Calibration &rArr; ADC_ITDMAConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_QuickInit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>CCD_Start</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, ccd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100Ns
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>

<P><STRONG><a name="[9e]"></a>CCD_ImageCapture</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, ccd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CCD_ImageCapture &rArr; ADC_QuickReadValue &rArr; ADC_StartConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay100Ns
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_QuickReadValue
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15a]"></a>CCD_IntegTime</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, ccd.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>CCD_Diff</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ccd.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>Encoder_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, encoder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Encoder_Init &rArr; GPIO_QuickInit &rArr; GPIO_Init &rArr; GPIO_PinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpm_pulse_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpm_pulse_clean
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_QuickInit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>Encoder_GetPulse</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, encoder.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Encoder_GetPulse
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpm_pulse_get
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpm_pulse_clean
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedCalculate
</UL>

<P><STRONG><a name="[9b]"></a>Key_Scan</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Key_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[98]"></a>Key_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Key_Init &rArr; GPIO_QuickInit &rArr; GPIO_Init &rArr; GPIO_PinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_QuickInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>M_Encoder_Scan</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = M_Encoder_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Encoder_Init
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT0_CallBack
</UL>

<P><STRONG><a name="[99]"></a>M_Encoder_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = M_Encoder_Init &rArr; GPIO_QuickInit &rArr; GPIO_Init &rArr; GPIO_PinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Encoder_Scan
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_QuickInit
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[84]"></a>Key_STA</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, key.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Change
</UL>

<P><STRONG><a name="[8f]"></a>Motor_Init</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Motor_Init &rArr; TPM_PWM_QuickInit &rArr; TPM_PWM_ChangeDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_PWM_QuickInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_PWM_ChangeDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[76]"></a>Motor_PWM</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Motor_PWM &rArr; TPM_PWM_ChangeDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_PWM_ChangeDuty
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_STOP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlOut
</UL>

<P><STRONG><a name="[78]"></a>Motor_STOP</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, motor.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Motor_STOP &rArr; Motor_PWM &rArr; TPM_PWM_ChangeDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_Protect
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Run_Forrest
</UL>

<P><STRONG><a name="[85]"></a>Motor_START</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, motor.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Change
</UL>

<P><STRONG><a name="[15c]"></a>Delay_ms</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, oled.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>OLED_WrDat</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OLED_WrDat &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_BMP
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P14x16Str
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P8x16Str
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P6x8Str
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Rectangle
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_PutPixel
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
</UL>

<P><STRONG><a name="[bd]"></a>OLED_WrCmd</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OLED_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_PutPixel
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[be]"></a>OLED_Set_Pos</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OLED_Set_Pos &rArr; OLED_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_BMP
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P14x16Str
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P8x16Str
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P6x8Str
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Rectangle
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_PutPixel
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[bf]"></a>OLED_Fill</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = OLED_Fill &rArr; OLED_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[c0]"></a>OLED_CLS</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
</UL>

<P><STRONG><a name="[c1]"></a>OLED_DLY_ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, oled.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Rectangle
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[92]"></a>OLED_Init</STRONG> (Thumb, 348 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = OLED_Init &rArr; OLED_Fill &rArr; OLED_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DLY_ms
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_QuickInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>OLED_PutPixel</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
</UL>

<P><STRONG><a name="[c3]"></a>OLED_Rectangle</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_DLY_ms
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
</UL>

<P><STRONG><a name="[c4]"></a>OLED_P6x8Str</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
</UL>

<P><STRONG><a name="[c5]"></a>OLED_P8x16Str</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OLED_P8x16Str &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
</UL>

<P><STRONG><a name="[c6]"></a>OLED_P14x16Str</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = OLED_P14x16Str &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
</UL>

<P><STRONG><a name="[7c]"></a>OLED_Print</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OLED_Print &rArr; OLED_P14x16Str &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P14x16Str
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_P8x16Str
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_BatVol
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Change
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Parameter
</UL>

<P><STRONG><a name="[c7]"></a>Draw_BMP</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, oled.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
</UL>

<P><STRONG><a name="[8c]"></a>LED_Init</STRONG> (Thumb, 244 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LED_Init &rArr; GPIO_QuickInit &rArr; GPIO_Init &rArr; GPIO_PinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_QuickInit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>LED_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LED_Config &rArr; GPIO_WriteBit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>IR_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IR_Init &rArr; GPIO_QuickInit &rArr; GPIO_Init &rArr; GPIO_PinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_CallbackInstall
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_QuickInit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>Beacon_Check</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Beacon_Check &rArr; GPIO_ITDMAConfig &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ITDMAConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>ADC_ChlMuxConfig</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_ChlMuxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_QuickInit
</UL>

<P><STRONG><a name="[cb]"></a>ADC_ITDMAConfig</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_ITDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calibration
</UL>

<P><STRONG><a name="[cc]"></a>ADC_Init</STRONG> (Thumb, 556 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ADC_Init &rArr; ADC_Calibration &rArr; ADC_ITDMAConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Calibration
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_QuickInit
</UL>

<P><STRONG><a name="[50]"></a>ADC_QuickInit</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ADC_QuickInit &rArr; ADC_Init &rArr; ADC_Calibration &rArr; ADC_ITDMAConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinPullConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinMuxConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChlMuxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MMA7361_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ENC03_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCD_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatteryMon_Init
</UL>

<P><STRONG><a name="[15d]"></a>ADC_IsConversionCompleted</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[d1]"></a>ADC_ReadValue</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_QuickReadValue
</UL>

<P><STRONG><a name="[d0]"></a>ADC_StartConversion</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_StartConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_QuickReadValue
</UL>

<P><STRONG><a name="[81]"></a>ADC_QuickReadValue</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_QuickReadValue &rArr; ADC_StartConversion
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversion
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ReadValue
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_BatVol
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCD_ImageCapture
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Init
</UL>

<P><STRONG><a name="[15e]"></a>ADC_CallbackInstall</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, adc.o(.text), UNUSED)

<P><STRONG><a name="[1a]"></a>ADC0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>CLOCK_GetClockFrequency</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLOCK_GetClockFrequency &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_PWM_QuickInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_QuickInit
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[15f]"></a>QuickInitEncode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>QuickInitDecode</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, common.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>DelayInit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DelayInit &rArr; SYSTICK_DelayInit &rArr; SYSTICK_Init &rArr; CLOCK_GetClockFrequency &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_DelayInit
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>DelayMs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DelayMs &rArr; SYSTICK_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Encoder_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Init
</UL>

<P><STRONG><a name="[b5]"></a>DelayUs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCD_ImageCapture
</UL>

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[161]"></a>DMA_Init</STRONG> (Thumb, 480 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>DMA_GetTransferByteCnt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>DMA_SetTransferByteCnt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>DMA_EnableRequest</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>DMA_DisableRequest</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>DMA_EnableCycleSteal</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>DMA_EnableAutoDisableRequest</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>DMA_SetDestAddress</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>DMA_GetDestAddress</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>DMA_SetSourceAddress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>DMA_GetSourceAddress</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>DMA_ITConfig</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>DMA_CallbackInstall</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>DMA0_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DMA1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA3_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>PORT_PinMuxConfig</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PORT_PinMuxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_PWM_QuickInit
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tpm_pulse_init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_QuickInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_QuickInit
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_QuickInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_IC_QuickInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_QuickInit
</UL>

<P><STRONG><a name="[ce]"></a>PORT_PinPullConfig</STRONG> (Thumb, 164 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PORT_PinPullConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_QuickInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_QuickInit
</UL>

<P><STRONG><a name="[d6]"></a>GPIO_PinConfig</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_PinConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[b2]"></a>GPIO_Init</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init &rArr; GPIO_PinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfig
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinPullConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinMuxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_QuickInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCD_Init
</UL>

<P><STRONG><a name="[8e]"></a>GPIO_QuickInit</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GPIO_QuickInit &rArr; GPIO_Init &rArr; GPIO_PinConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Encoder_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>GPIO_WriteBit</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCD_Start
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Config
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCD_ImageCapture
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectCtrl
</UL>

<P><STRONG><a name="[b8]"></a>GPIO_ReadBit</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Encoder_Scan
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Scan
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beacon_Check
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_GetPulse
</UL>

<P><STRONG><a name="[16e]"></a>GPIO_ToggleBit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>GPIO_ReadPort</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>GPIO_WritePort</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[c8]"></a>GPIO_ITDMAConfig</STRONG> (Thumb, 364 bytes, Stack size 24 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_ITDMAConfig &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_ISR
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Beacon_Check
</UL>

<P><STRONG><a name="[c9]"></a>GPIO_CallbackInstall</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_CallbackInstall
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_Init
</UL>

<P><STRONG><a name="[29]"></a>PORTA_IRQHandler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PORTA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>I2C_Init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetBaudrate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_QuickInit
</UL>

<P><STRONG><a name="[da]"></a>I2C_QuickInit</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinPullConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinMuxConfig
</UL>

<P><STRONG><a name="[dc]"></a>I2C_GenerateSTART</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadSingleRegister
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BurstWrite
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BurstRead
</UL>

<P><STRONG><a name="[e2]"></a>I2C_GenerateRESTART</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BurstRead
</UL>

<P><STRONG><a name="[df]"></a>I2C_GenerateSTOP</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadSingleRegister
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BurstWrite
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BurstRead
</UL>

<P><STRONG><a name="[e1]"></a>I2C_SendData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadSingleRegister
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BurstWrite
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BurstRead
</UL>

<P><STRONG><a name="[e4]"></a>I2C_ReadData</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadSingleRegister
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BurstRead
</UL>

<P><STRONG><a name="[dd]"></a>I2C_Send7bitAddress</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadSingleRegister
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BurstWrite
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BurstRead
</UL>

<P><STRONG><a name="[de]"></a>I2C_WaitAck</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadSingleRegister
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BurstWrite
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BurstRead
</UL>

<P><STRONG><a name="[e3]"></a>I2C_SetMasterMode</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadSingleRegister
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BurstRead
</UL>

<P><STRONG><a name="[e6]"></a>I2C_GenerateNAck</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadSingleRegister
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BurstRead
</UL>

<P><STRONG><a name="[e5]"></a>I2C_GenerateAck</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadSingleRegister
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BurstRead
</UL>

<P><STRONG><a name="[171]"></a>I2C_ITDMAConfig</STRONG> (Thumb, 152 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>I2C_CallbackInstall</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>I2C_IsBusy</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_ReadSingleRegister
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BurstWrite
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BurstRead
</UL>

<P><STRONG><a name="[db]"></a>I2C_BurstRead</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsBusy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateAck
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateNAck
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetMasterMode
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadData
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateRESTART
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadSingleRegister
</UL>

<P><STRONG><a name="[e7]"></a>I2C_BurstWrite</STRONG> (Thumb, 220 bytes, Stack size 36 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsBusy
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteSingleRegister
</UL>

<P><STRONG><a name="[e8]"></a>I2C_WriteSingleRegister</STRONG> (Thumb, 34 bytes, Stack size 40 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BurstWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCCB_WriteSingleRegister
</UL>

<P><STRONG><a name="[e9]"></a>I2C_ReadSingleRegister</STRONG> (Thumb, 32 bytes, Stack size 28 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_BurstRead
</UL>

<P><STRONG><a name="[ea]"></a>SCCB_ReadSingleRegister</STRONG> (Thumb, 258 bytes, Stack size 36 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsBusy
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateAck
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateNAck
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetMasterMode
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitAck
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send7bitAddress
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadData
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SendData
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTOP
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GenerateSTART
</UL>

<P><STRONG><a name="[eb]"></a>SCCB_WriteSingleRegister</STRONG> (Thumb, 24 bytes, Stack size 20 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteSingleRegister
</UL>

<P><STRONG><a name="[13]"></a>I2C0_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>I2C1_IRQHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>PIT_Init</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, pit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PIT_Init &rArr; CLOCK_GetClockFrequency &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_QuickInit
</UL>

<P><STRONG><a name="[94]"></a>PIT_QuickInit</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, pit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PIT_QuickInit &rArr; PIT_Init &rArr; CLOCK_GetClockFrequency &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>PIT_ITDMAConfig</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, pit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PIT_ITDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[173]"></a>PIT_ResetCounter</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, pit.o(.text), UNUSED)

<P><STRONG><a name="[174]"></a>PIT_GetCounterValue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pit.o(.text), UNUSED)

<P><STRONG><a name="[95]"></a>PIT_CallbackInstall</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, pit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[21]"></a>PIT_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, pit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIT_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>SYSTICK_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SYSTICK_Init &rArr; CLOCK_GetClockFrequency &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_DelayInit
</UL>

<P><STRONG><a name="[ef]"></a>SYSTICK_ITConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_DelayInit
</UL>

<P><STRONG><a name="[ee]"></a>SYSTICK_Cmd</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_DelayInit
</UL>

<P><STRONG><a name="[d3]"></a>SYSTICK_DelayInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SYSTICK_DelayInit &rArr; SYSTICK_Init &rArr; CLOCK_GetClockFrequency &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_Cmd
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_ITConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayInit
</UL>

<P><STRONG><a name="[d5]"></a>SYSTICK_DelayUs</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, systick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
</UL>

<P><STRONG><a name="[d4]"></a>SYSTICK_DelayMs</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, systick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSTICK_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>

<P><STRONG><a name="[175]"></a>TPM_PWM_InvertPolarity</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, tpm.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>TPM_PWM_ChangeDuty</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, tpm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TPM_PWM_ChangeDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_PWM_QuickInit
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_PWM
</UL>

<P><STRONG><a name="[ba]"></a>TPM_PWM_QuickInit</STRONG> (Thumb, 304 bytes, Stack size 48 bytes, tpm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TPM_PWM_QuickInit &rArr; TPM_PWM_ChangeDuty
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_PWM_ChangeDuty
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_SetMode
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TPM_InitBasic
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockFrequency
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinMuxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Init
</UL>

<P><STRONG><a name="[f2]"></a>TPM_ITDMAConfig</STRONG> (Thumb, 378 bytes, Stack size 12 bytes, tpm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>

<P><STRONG><a name="[176]"></a>TPM_CallbackInstall</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tpm.o(.text), UNUSED)

<P><STRONG><a name="[f3]"></a>TPM_IC_QuickInit</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, tpm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_SetMode
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_TPM_InitBasic
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinMuxConfig
</UL>

<P><STRONG><a name="[177]"></a>TPM_IC_SetTriggerMode</STRONG> (Thumb, 196 bytes, Stack size 12 bytes, tpm.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>TPM_GetChlCounter</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tpm.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>TPM_SetMoudleCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tpm.o(.text), UNUSED)

<P><STRONG><a name="[1c]"></a>TPM0_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, tpm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TPM0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TPM1_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, tpm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TPM1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TPM2_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, tpm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TPM2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>tpm_pulse_init</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, tpm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tpm_pulse_init &rArr; PORT_PinMuxConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinMuxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init
</UL>

<P><STRONG><a name="[b7]"></a>tpm_pulse_clean</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tpm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_GetPulse
</UL>

<P><STRONG><a name="[b9]"></a>tpm_pulse_get</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tpm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Encoder_GetPulse
</UL>

<P><STRONG><a name="[f5]"></a>UART_WriteByte</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[f4]"></a>fputc</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WriteByte
</UL>

<P><STRONG><a name="[f7]"></a>UART_ReadByte</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[f6]"></a>fgetc</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ReadByte
</UL>

<P><STRONG><a name="[f8]"></a>UART_Init</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_QuickInit
</UL>

<P><STRONG><a name="[a8]"></a>UART_QuickInit</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART_QuickInit &rArr; CLOCK_GetClockFrequency &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockFrequency
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinMuxConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMC_Init
</UL>

<P><STRONG><a name="[88]"></a>UART_ITDMAConfig</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_ITDMAConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Send_DATA
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_TX_ISR
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMC_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Change
</UL>

<P><STRONG><a name="[a9]"></a>UART_CallbackRxInstall</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_CallbackRxInstall
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMC_Init
</UL>

<P><STRONG><a name="[aa]"></a>UART_CallbackTxInstall</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_CallbackTxInstall
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMC_Init
</UL>

<P><STRONG><a name="[17]"></a>UART0_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART1_IRQHandler</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>UART2_IRQHandler</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>SPI_Init</STRONG> (Thumb, 516 bytes, Stack size 16 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HAL_SetBaud
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_QuickInit
</UL>

<P><STRONG><a name="[fc]"></a>SPI_QuickInit</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PORT_PinMuxConfig
</UL>

<P><STRONG><a name="[17a]"></a>SPI_ReadWriteByte</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>SPI_ITDMAConfig</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>SPI_CallbackInstall</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, spi.o(.text), UNUSED)

<P><STRONG><a name="[15]"></a>SPI0_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI1_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>CMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[17d]"></a>DefaultISR</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>FTFA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>LLW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>LPTimer_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>LVD_LVW_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>MCG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>PORTC_PORTD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_Seconds_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>Reserved20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>Reserved45_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TSI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USB0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(RESET)
</UL>
<P><STRONG><a name="[120]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_mkl26z4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[30]"></a>SystemInit</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, system_mkl26z4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_mkl26z4.o(.text)
</UL>
<P><STRONG><a name="[fd]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, system_mkl26z4.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[7b]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterList_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_Parameter
</UL>

<P><STRONG><a name="[100]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[101]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[ff]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[102]"></a>__printf</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[106]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[105]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Init
</UL>

<P><STRONG><a name="[17e]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageBinary
</UL>

<P><STRONG><a name="[17f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[107]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[86]"></a>strcmp</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Change
</UL>

<P><STRONG><a name="[180]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_uidivmod</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_PWM_QuickInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_PWM_ChangeDuty
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectCtrl
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_HAL_SetBaud
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetBaudrate
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockFrequency
</UL>

<P><STRONG><a name="[181]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>__aeabi_idivmod</STRONG> (Thumb, 326 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_BatVol
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Put
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Get
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_State
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIT1_CallBack
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageBinary
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageBinaryzation
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Show_BatVol
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedCtrl
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_EX_Ctrl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedCalculate
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleCalculate
</UL>

<P><STRONG><a name="[182]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[5f]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_EX_Ctrl
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageBinary
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[108]"></a>_dadd</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[67]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleCalculate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[10b]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[10c]"></a>_drsb</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 88 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_BatVol
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedCtrl
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[10e]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 88 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[10d]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageBinary
</UL>

<P><STRONG><a name="[183]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_BatVol
</UL>

<P><STRONG><a name="[184]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageBinary
</UL>

<P><STRONG><a name="[185]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_BatVol
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedCalculate
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleCalculate
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ImageBinary
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[186]"></a>_dmul</STRONG> (Thumb, 592 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_Protect
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedCtrl
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_EX_Ctrl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedCalculate
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleCtrl
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleCalculate
</UL>

<P><STRONG><a name="[187]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverFilter_getVal
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Init
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFliter
</UL>

<P><STRONG><a name="[111]"></a>_fdiv</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[110]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlOut
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rightangle_Recognition
</UL>

<P><STRONG><a name="[188]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[189]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[112]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[47]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverFilter_getVal
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remode_Direct
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlOut
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectCtrl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedCalculate
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMotorDead
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSpeedPI
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAnglePD
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rightangle_Recognition
</UL>

<P><STRONG><a name="[18a]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_data
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18b]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[115]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[fe]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>

<P><STRONG><a name="[32]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[116]"></a>_printf_cs_common</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[118]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[3a]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[119]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[125]"></a>__ARM_scalbn</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, dscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[11c]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmpeq
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[18c]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[18d]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__fpl_cmpreturn</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[11b]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[129]"></a>_dsqrt</STRONG> (Thumb, 250 bytes, Stack size 20 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[11d]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[18e]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[18f]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[3c]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[41]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[11e]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[45]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[190]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[191]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, catchline.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ITDMAConfig
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remote_Mode
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectCtrl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rightangle_Recognition
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_ITDMAConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_GetClockFrequency
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[126]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[123]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[124]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[103]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[69]"></a>asin</STRONG> (Thumb, 584 bytes, Stack size 80 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = asin &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleCalculate
</UL>

<P><STRONG><a name="[128]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sqrt &rArr; _dsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_Protect
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleCtrl
</UL>

<P><STRONG><a name="[12a]"></a>_dcmple</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dlef.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[6b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_Protect
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleCtrl
</UL>

<P><STRONG><a name="[12b]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AverFilter_getVal
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Change
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP1Filter_getVal
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFliter
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remode_Direct
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlOut
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectCtrl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedCtrl
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleCtrl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rightangle_Recognition
</UL>

<P><STRONG><a name="[12c]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, feqf.o(x$fpl$feqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UMC_Init
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Change
</UL>

<P><STRONG><a name="[12e]"></a>_fcmpeq</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, feqf.o(x$fpl$feqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_abs
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_Protect
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remode_Direct
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlOut
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectCtrl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedCtrl
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_EX_Ctrl
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleCalculate
</UL>

<P><STRONG><a name="[12f]"></a>_fcmple</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP1Filter_getVal
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFliter
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remode_Direct
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlOut
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectCtrl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedCtrl
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleCtrl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rightangle_Recognition
</UL>

<P><STRONG><a name="[193]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[57]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Car_Protect
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remode_Direct
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlOut
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectCtrl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedCtrl
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Speed_EX_Ctrl
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleCalculate
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rightangle_Recognition
</UL>

<P><STRONG><a name="[130]"></a>_frcmple</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFliter
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remode_Direct
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectCtrl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedCtrl
</UL>

<P><STRONG><a name="[131]"></a>_frsb</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Change
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP1Filter_getVal
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KalmanFliter
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Remode_Direct
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CtrlOut
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectCtrl
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpeedCtrl
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleCtrl
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AngleCalculate
</UL>

<P><STRONG><a name="[133]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[7a]"></a>Show_Parameter</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = Show_Parameter &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprint
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Print
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Parameter_Change
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterList_Init
</UL>

<P><STRONG><a name="[7f]"></a>Insert_ParameterNode</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, debug.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Insert_ParameterNode
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParameterList_Init
</UL>

<P><STRONG><a name="[2c]"></a>PIT1_CallBack</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIT1_CallBack &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>PIT0_CallBack</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PIT0_CallBack &rArr; M_Encoder_Scan
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M_Encoder_Scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[2e]"></a>UART_TX_ISR</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, umc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_TX_ISR &rArr; Queue_Get &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Get
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_State
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITDMAConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umc.o(.text)
</UL>
<P><STRONG><a name="[2d]"></a>UART_RX_ISR</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, umc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_RX_ISR &rArr; Queue_Put &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_Put
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Queue_State
</UL>
<BR>[Address Reference Count : 1]<UL><LI> umc.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>IR_ISR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ir.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = IR_ISR &rArr; GPIO_ITDMAConfig &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ITDMAConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ir.o(.text)
</UL>
<P><STRONG><a name="[ca]"></a>ADC_Calibration</STRONG> (Thumb, 302 bytes, Stack size 20 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ADC_Calibration &rArr; ADC_ITDMAConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ITDMAConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[d7]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ITDMAConfig
</UL>

<P><STRONG><a name="[d8]"></a>I2C_SetBaudrate</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[f0]"></a>_TPM_InitBasic</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, tpm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _TPM_InitBasic
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_PWM_QuickInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_IC_QuickInit
</UL>

<P><STRONG><a name="[f1]"></a>TPM_SetMode</STRONG> (Thumb, 324 bytes, Stack size 12 bytes, tpm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TPM_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_PWM_QuickInit
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPM_IC_QuickInit
</UL>

<P><STRONG><a name="[f9]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_ITDMAConfig
</UL>

<P><STRONG><a name="[fa]"></a>SPI_HAL_SetBaud</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[10a]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[109]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[132]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[12d]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[33]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[121]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[117]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<HR></body></html>
